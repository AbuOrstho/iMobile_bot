from aiogram import types
from aiogram.dispatcher import Dispatcher
from handlers.keyboards import *
from services.cart_db import add_to_cart, get_cart, get_cart_count, remove_from_cart

user_choice = {}
category_display = {
    "–ê–ö–°–ï–°–°–£–ê–†–´": "–∞–∫—Å–µ—Å—Å—É–∞—Ä  ",
    "–ù–ê–£–®–ù–ò–ö–ò": "–Ω–∞—É—à–Ω–∏–∫–æ–≤",
    "–ù–û–£–¢–ë–£–ö–ò": "–Ω–æ—É—Ç–±—É–∫–∞ ",
    "–ü–õ–ê–ù–®–ï–¢–´": "–ø–ª–∞–Ω—à–µ—Ç–∞ ",
    "–°–ú–ê–†–¢ –ß–ê–°–´": "—Å–º–∞—Ä—Ç-—á–∞—Å–æ–≤",
    "–°–ú–ê–†–¢–§–û–ù–´": "—Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ ",
}


async def category_callback_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–æ–≤–∞—Ä–∞."""
    category_name = callback_query.data.replace("category_", "")
    keyboard = create_manufacturer_keyboard(category_name)
    if len(keyboard["inline_keyboard"]) > 1:
        # print(keyboard)
        await callback_query.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è {category_display[category_name][:-2]}–æ–≤",
                                               reply_markup=keyboard)
    else:
        await callback_query.message.edit_text(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, {category_display[category_name][:-2]}–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏",
            reply_markup=keyboard)

    await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ callback-–∑–∞–ø—Ä–æ—Å–∞


async def back_to_category_callback_handler(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=create_categories_keyboard())
    await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ callback-–∑–∞–ø—Ä–æ—Å–∞


async def model_callback_handler(callback_query: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    :param callback_query:
    :return:
    """
    data_list = callback_query.data.split('_')
    category_name, manufacturer = data_list[1], data_list[2]

    keyboard = create_models_keyboard(category_name, manufacturer)

    if len(keyboard["inline_keyboard"]) > 1:
        # print(keyboard)
        await callback_query.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å {category_display[category_name]} –æ—Ç {manufacturer}",
                                               reply_markup=keyboard)
    else:
        await callback_query.message.edit_text(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, {category_display[category_name]} –æ—Ç {manufacturer} –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏",
            reply_markup=keyboard)

    await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ callback-–∑–∞–ø—Ä–æ—Å–∞


async def back_to_manufacturer_callback_handler(callback_query: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    await callback_query.message.delete()


async def add_to_cart_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    product_id = callback_query.data.split('_')[-1]
    if get_cart_count(user_id) < 50:
        print(user_id, product_id)
        add_to_cart(user_id, product_id)
        await callback_query.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)
    else:
        await callback_query.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –ª–∏—à–Ω–∏–µ —Ç–æ–≤–∞—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                                    show_alert=True)


async def get_cart_items(message: types.Message):
    user_id = message.from_user.id
    cart_items = get_cart(user_id)

    cart_category_display = {
        "–ê–ö–°–ï–°–°–£–ê–†–´": "–ê–∫—Å–µ—Å—Å—É–∞—Ä",
        "–ù–ê–£–®–ù–ò–ö–ò": "–ù–∞—É—à–Ω–∏–∫–∏",
        "–ù–û–£–¢–ë–£–ö–ò": "–ù–æ—É—Ç–±—É–∫",
        "–ü–õ–ê–ù–®–ï–¢–´": "–ü–ª–∞–Ω—à–µ—Ç ",
        "–°–ú–ê–†–¢ –ß–ê–°–´": "–°–º–∞—Ä—Ç-—á–∞—Å—ã",
        "–°–ú–ê–†–¢–§–û–ù–´": "–°–º–∞—Ä—Ç—Ñ–æ–Ω",
    }

    cart_dict = {}
    response_text = ""

    if cart_items:
        response_text += "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
        for index, product_id in enumerate(cart_items, start=1):
            product_info = db.get_product_by_id(product_id)

            cart_dict[index] = {
                "id": product_info["id"],
                "category": product_info['category'],
                "manufacturer": product_info["manufacturer"],
                "short_name": product_info["short_name"],
                "description": product_info["description"],
                "memory": product_info["memory"],
                "color": product_info["color"],
                "price": product_info["price"],
            }

            response_text += (
                f"<b>/{index}</b>: {cart_category_display.get(product_info['category'], '–¢–æ–≤–∞—Ä')} {cart_dict[index]['manufacturer']} "
                f"{cart_dict[index]['short_name']} {cart_dict[index]['color']} "
                f"{cart_dict[index]['memory'] if cart_dict[index]['memory'] != 0 else ''}\n–¶–µ–Ω–∞: <b>{int(cart_dict[index]['price'])} ‚ÇΩ</b>\n\n")

        markup = get_pagination_keyboard(user_id, cart_dict, 0)

        await message.answer(
            response_text + "\n\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –µ–≥–æ –∏–Ω–¥–µ–∫—Å—É. "
                            "\n–î–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /clear_cart.",
            parse_mode="HTML",
            reply_markup=markup
        )
    else:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", parse_mode="HTML")


def get_pagination_keyboard(user_id, cart_dict, page=0):
    markup = InlineKeyboardMarkup(row_width=5)

    start = page * 10
    end = start + 10

    for index in range(start, min(end, len(cart_dict))):
        product_id = cart_dict[index + 1]["id"]
        markup.insert(InlineKeyboardButton(
            text=f"{index + 1}",
            callback_data=f"delete_product_{user_id}_{product_id}"
        ))

    navigation_buttons = []
    if start > 0:
        navigation_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cart_page_{user_id}_{page - 1}"))
    if end < len(cart_dict):
        navigation_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"cart_page_{user_id}_{page + 1}"))

    if navigation_buttons:
        markup.row(*navigation_buttons)

    return markup


async def delete_product_callback_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
    user_id = callback_query.from_user.id
    _, _, product_id = callback_query.data.split('_', 2)

    remove_from_cart(user_id, int(product_id))
    await callback_query.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)
    await get_cart_items(callback_query.message)


async def paginate_cart_callback_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–æ—Ä–∑–∏–Ω—ã."""
    user_id = callback_query.from_user.id
    _, _, page = callback_query.data.rsplit('_', 2)

    cart_items = get_cart(user_id)
    cart_dict = {index + 1: db.get_product_by_id(product_id) for index, product_id in enumerate(cart_items)}

    markup = get_pagination_keyboard(user_id, cart_dict, int(page))
    await callback_query.message.edit_reply_markup(reply_markup=markup)
    await callback_query.answer()


def register_callback_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤."""
    dp.register_callback_query_handler(category_callback_handler,
                                       lambda callback_query: callback_query.data.startswith("category_"))
    dp.register_callback_query_handler(back_to_category_callback_handler,
                                       lambda callback_query: callback_query.data.startswith("back_to_categories"))
    dp.register_callback_query_handler(model_callback_handler,
                                       lambda callback_query: callback_query.data.startswith("manufacturer_"))
    dp.register_callback_query_handler(back_to_manufacturer_callback_handler,
                                       lambda callback_query: callback_query.data.startswith("back_to_manufacturer_"))
    dp.register_callback_query_handler(add_to_cart_callback_handler,
                                       lambda callback_query: callback_query.data.startswith("add_to_cart_"))
    dp.register_callback_query_handler(delete_product_callback_handler,
                                       lambda callback_query: callback_query.data.startswith("delete_product_"))
    dp.register_callback_query_handler(paginate_cart_callback_handler,
                                       lambda callback_query: callback_query.data.startswith("cart_page_"))


"""
{'id': 44, 
'category': '–°–ú–ê–†–¢–§–û–ù–´', 
'manufacturer': 'Apple', 
'short_name': '15 Pro Max', 
'name': '–°–º–∞—Ä—Ç—Ñ–æ–Ω Apple iPhone 15 Pro Max 256GB White Titanium (–¢–∏—Ç–∞–Ω–æ–≤—ã–π –±–µ–ª—ã–π)', 
'description': nan, 
'memory': '256Gb', 
'color': 'Titanium (–¢–∏—Ç–∞–Ω–æ–≤—ã–π –±–µ–ª—ã–π)', 
'price': 130900.0, 
'stock': 1.0, 
'photo': 'https://imobile77.ru/wa-data/public/shop/products/27/08/10827/images/41105/41105.200.png'}
"""
